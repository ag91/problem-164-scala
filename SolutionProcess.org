* Solve 164 in Scala

Let's try to solve this in Scala: https://www.4clojure.com/problem/164

We create a directory structure for sbt:

#+BEGIN_SRC sh
mkdir -p /tmp/problem-164-in-scala/problem164scala/src/test/scala /tmp/problem-164-in-scala/problem164scala/src/main/scala
#+END_SRC

#+RESULTS:

First we define the software we are going to use to have a
reproducible build:
#+BEGIN_SRC text :tangle /tmp/problem-164-in-scala/default.nix
{ }:
let
pkgs = import <nixpkgs> {};
stdenv = pkgs.stdenv;
sbt = pkgs.sbt;
scala = pkgs.scala;

in stdenv.mkDerivation {
name = "test_derivation";

buildInputs = [ sbt scala ];
}
#+END_SRC

We create a sandbox with this software installed:
#+BEGIN_SRC sh :dir /tmp/problem-164-in-scala/
nix-shell .
#+END_SRC

Then we import the test frameworks to test our solution:

#+BEGIN_SRC scala :noeval :tangle /tmp/problem-164-in-scala/problem164scala/build.sbt
name := "problem164scala"

// unit testing
libraryDependencies += "org.scalactic" %% "scalactic" % "3.0.1"
libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.1" % "test"
#+END_SRC

We create an sbt project for the Emacs Ensime mode:
#+BEGIN_SRC sh :results example output :dir /tmp/problem-164-in-scala/problem164scala
sbt clean ensimeConfig
#+END_SRC

#+RESULTS:
#+begin_example
[info] Loading global plugins from /home/andrea/.sbt/0.13/plugins
[info] Set current project to problem164scala (in build file:/tmp/problem-164-in-scala/problem164scala/)
[success] Total time: 0 s, completed 16-Jan-2017 15:36:56
[info] ENSIME update.
[info] Updating {file:/tmp/problem-164-in-scala/problem164scala/}problem164scala...
[info] Resolving org.scala-lang#scala-library;2.10.6 ...
[info] Resolving org.scalactic#scalactic_2.10;3.0.1 ...
[info] Resolving org.scala-lang#scala-reflect;2.10.6 ...
[info] Resolving org.scalatest#scalatest_2.10;3.0.1 ...
[info] Resolving org.scala-lang#scala-compiler;2.10.6 ...
[info] Resolving org.scala-lang#jline;2.10.6 ...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Resolving org.scala-lang#scalap;2.10.6 ...
[info] Done updating.
[warn] SBT is using ivy to resolve dependencies and is known to be slow. Coursier is recommended: http://get-coursier.io
[info] Resolving org.scalactic#scalactic_2.10;3.0.1 ...
[info] Resolving org.scala-lang#scala-reflect;2.10.6 ...
[info] Resolving org.scala-lang#scala-library;2.10.6 ...
[info] Resolving org.scalatest#scalatest_2.10;3.0.1 ...
[info] Resolving org.scala-lang#jline;2.10.6 ...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Resolving org.scala-lang#scala-compiler;2.10.6 ...
[info] Resolving org.scala-lang#scalap;2.10.6 ...
[info] ENSIME processing problem164scala (problem164scala)
#+end_example

Then let's translates the tests given by
https://www.4clojure.com/problem/164:

#+BEGIN_SRC scala :noeval :tangle /tmp/problem-164-in-scala/problem164scala/src/test/scala/GivenTests.scala
package problem164scala

import org.scalatest._

class GivenTests extends FunSuite with Matchers {

def makeDFA(states: Set[String], alphabet: Set[String], start: String, accepts: Set[String], transitions: Set[(String,String,String)]) = {
val states1 = states.map((x:String) => State(x))
val alphabet1 = alphabet.map((x:String) => Word(x))
val start1 = State(start)
val accepts1 = accepts.map((x:String) => State(x))
val transitions1 = transitions.map((flt:(String,String,String)) => Transition(State(flt._1), Word(flt._2), State(flt._3)))
DFA(states1,alphabet1,start1,accepts1,transitions1)
}

test("produce a set {'a' 'ab' 'abc'} for the given DFA") {
val states = Set("q0","q1","q2","q3")
val alphabet = Set("a","b","c")
val start = "q0"
val accepts = Set("q1","q2","q3")
val transitions = Set(("q0","a","q1"),("q1","b","q2"),("q2","c","q3"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
Solution.solve(dfa) should be (Set("a","ab","abc"))
}

test("produce a set {'hi' 'hey' 'hello'} for the given DFA") {
val states = Set("q0","q1","q2","q3","q4","q5","q6","q7")
val alphabet = Set("e","h","i","l","o","y")
val start = "q0"
val accepts = Set("q2","q4","q7")
val transitions = Set(("q0","h","q1"),("q1","i","q2"),("q1","e","q3"),("q3","l","q5"),("q3","y","q4"),("q5","l","q6"),("q6","o","q7"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
Solution.solve(dfa) should be (Set("hi","hey","hello"))
}


test("produce set created by list comprehension for the given DFA") {
val states = Set("q0","q1","q2","q3","q4")
val alphabet = Set("v","w","x","y","z")
val start = "q0"
val accepts = Set("q4")
val transitions = Set(("q0","v","q1"),("q0","w","q1"),("q0","x","q1"),("q0","y","q1"),("q0","z","q1"),
         ("q1","v","q2"),("q1","w","q2"),("q1","x","q2"),("q1","y","q2"),("q1","z","q2"),
         ("q2","v","q3"),("q2","w","q3"),("q2","x","q3"),("q2","y","q3"),("q2","z","q3"),
         ("q3","v","q4"),("q3","w","q4"),("q3","x","q4"),("q3","y","q4"),("q3","z","q4"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
val s = "vwxyz"
val result =
(for
(v <- 0 until 5;
w <- 0 until 5;
x <- 0 until 5;
y <- 0 until 5) 
yield
(s(v)::s(w)::s(x)::s(y)::Nil).mkString
)
Solution.solve(dfa) should be (result.toSet)
}



// FIXME traduce tests from clojure https://www.4clojure.com/problem/164
}
#+END_SRC

And let's satisfy the tests writing some code:
#+BEGIN_SRC scala :noeval :tangle /tmp/problem-164-in-scala/problem164scala/src/main/scala/Solution.scala
package problem164scala

case class State[S](state: S)

case class Word[W](word: W)

case class Transition[S,W](from: State[S], label: Word[W], to: State[S])

case class DFA[S,W](states: Set[State[S]], alphabet: Set[Word[W]], start: State[S], accepts: Set[State[S]], transitions: Set[Transition[S,W]])

object Solution {

def solve(dfa: DFA[String,String]): Set[String] = {

def collectFinished(_starts: => Set[(State[String],String)], _acc: Set[String]) : Set[String] = {
lazy val starts = _starts
def f1(acc: Set[String], kv: (State[String],String)) : Set[String] = {
kv match {
case (k,v) => {
dfa.accepts.contains(k) match {
case true => // we can return the string
acc + v
case false => //we cannot return the string
acc
}
}
}
}
starts.foldLeft(_acc)(f1)      
}

def leaveOnlyTransitionable(_starts: => Set[(State[String],String)]): Set[(State[String],String)] = {
// get all accepted states from which no transition start
val ss = dfa.accepts.filterNot(s => dfa.transitions.exists(t => t.from == s))
// we do not want the pairs with a state in [ss]
_starts.filterNot(kv => ss.contains(kv._1))
}

def applyAvailableTransitions(_starts: => Set[(State[String],String)]): Set[(State[String],String)] = {
def f1(acc: Set[(State[String],String)], kv: (State[String],String)): Set[(State[String],String)] = {
// get all transitions starting from k
val kTransitions = dfa.transitions.filter(t => t.from == kv._1)
// apply transition
val pacc = kTransitions.map(t => (t.to,kv._2 + t.label.word))
acc ++ pacc
}
_starts.foldLeft(Set():(Set[(State[String],String)]))(f1)
}

def solve1(_starts: => Set[(State[String],String)], _acc: Set[String]): (Set[(State[String],String)],Set[String]) = {
lazy val starts = _starts
// we collect all the strings that are finished
val acc = collectFinished(starts,_acc)
// then we clean all the states that are accepted and that
// cannot run a transition from _starts
val starts0 = leaveOnlyTransitionable(starts)
// then we update [starts0] by applying the transitions
val starts1 = applyAvailableTransitions(starts0)
(starts1,acc)
}


def recsolve1(_starts: => Set[(State[String],String)], _acc: Set[String]): Set[String] = {
lazy val (starts,acc) = solve1(_starts,_acc)
if (starts.isEmpty) {
acc
} else {recsolve1(starts,acc)}
}

recsolve1(Set((dfa.start,"")),Set())

}
}

#+END_SRC

Now that we have the core logic of the program, let's add the tests
on laziness:

#+BEGIN_SRC scala :noeval :mkdirp yes :tangle /tmp/problem-164-scala/problem164scala/src/test/scala/GivenTests.scala
package problem164scala

import org.scalatest._

class GivenTests extends FunSuite with Matchers {

def makeDFA(states: Set[String], alphabet: Set[String], start: String, accepts: Set[String], transitions: Set[(String,String,String)]) = {
val states1 = states.map((x:String) => State(x))
val alphabet1 = alphabet.map((x:String) => Word(x))
val start1 = State(start)
val accepts1 = accepts.map((x:String) => State(x))
val transitions1 = transitions.map((flt:(String,String,String)) => Transition(State(flt._1), Word(flt._2), State(flt._3)))
DFA(states1,alphabet1,start1,accepts1,transitions1)
}

test("produce stream {'a' 'ab' 'abc'} for the given DFA") {
val states = Set("q0","q1","q2","q3")
val alphabet = Set("a","b","c")
val start = "q0"
val accepts = Set("q1","q2","q3")
val transitions = Set(("q0","a","q1"),("q1","b","q2"),("q2","c","q3"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
Solution.solve(dfa) should be (Stream("a","ab","abc"))
}

test("produce a stream {'hi' 'hey' 'hello'} for the given DFA") {
val states = Set("q0","q1","q2","q3","q4","q5","q6","q7")
val alphabet = Set("e","h","i","l","o","y")
val start = "q0"
val accepts = Set("q2","q4","q7")
val transitions = Set(("q0","h","q1"),("q1","i","q2"),("q1","e","q3"),("q3","l","q5"),("q3","y","q4"),("q5","l","q6"),("q6","o","q7"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
Solution.solve(dfa) should be (Stream("hi","hey","hello"))
}


test("produce stream created by list comprehension for the given DFA") {
val states = Set("q0","q1","q2","q3","q4")
val alphabet = Set("v","w","x","y","z")
val start = "q0"
val accepts = Set("q4")
val transitions = Set(("q0","v","q1"),("q0","w","q1"),("q0","x","q1"),("q0","y","q1"),("q0","z","q1"),
         ("q1","v","q2"),("q1","w","q2"),("q1","x","q2"),("q1","y","q2"),("q1","z","q2"),
         ("q2","v","q3"),("q2","w","q3"),("q2","x","q3"),("q2","y","q3"),("q2","z","q3"),
         ("q3","v","q4"),("q3","w","q4"),("q3","x","q4"),("q3","y","q4"),("q3","z","q4"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
val s = "vwxyz"
val result =
(for
(v <- 0 until 5;
w <- 0 until 5;
x <- 0 until 5;
y <- 0 until 5) 
yield
(s(v)::s(w)::s(x)::s(y)::Nil).mkString
)
Solution.solve(dfa).sorted should be (result.sorted.toStream)
}

test("produce stream 01 for the given DFA and test by property") {
val states = Set("q0","q1")
val alphabet = Set("0","1")
val start = "q0"
val accepts = Set("q0")
val transitions = Set(("q0","0","q0"),("q0","1","q1"),
         ("q1","0","q1"),("q1","1","q0"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
val stream = Solution.solve(dfa)
val res = stream.take(2000)
val pred1 = res.forall(s => s.matches("""0*(?:10*10*)*""".r.toString()))
val pred2 = res == res.distinct
(pred1 && pred2) should be (true)
}


test("produce stream nm for the given DFA and test by property") {
val states = Set("q0","q1")
val alphabet = Set("n","m")
val start = "q0"
val accepts = Set("q1")
val transitions = Set(("q0","n","q0"),("q0","m","q1"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
val stream = Solution.solve(dfa)
val res = stream.take(2000)
val pred1 = res.forall(s => s.matches("""n*m""".r.toString()))
val pred2 = res == res.distinct
(pred1 && pred2) should be (true)
}


test("produce stream ilompt for the given DFA and test by property") {
val states = Set("q0","q1","q2","q3","q4","q5","q6","q7","q8","q9")
val alphabet = Set("i","l","o","m","p","t")
val start = "q0"
val accepts = Set("q5","q8")
val transitions = Set(("q0","l","q1"),
         ("q1","i","q2"),("q1","o","q6"),
         ("q2","m","q3"),
         ("q3","i","q4"),
         ("q4","t","q5"),
         ("q6","o","q7"),
         ("q7","p","q8"),
         ("q8","l","q9"),
         ("q9","o","q6"))
val dfa = makeDFA(states,alphabet,start,accepts,transitions)
val stream = Solution.solve(dfa)
val res = stream.take(2000)
val pred1 = res.forall(s => s.matches("""limit|(?:loop)+""".r.toString()))
val pred2 = res == res.distinct
(pred1 && pred2) should be (true)
}
}
#+END_SRC

We add laziness to the logic of the program by introducing the
Stream (also let's use Seq instead of Sets):

#+BEGIN_SRC scala :noeval :mkdirp yes :tangle /tmp/problem-164-scala/problem164scala/src/main/scala/Solution.scala
package problem164scala

case class State[S](state: S)

case class Word[W](word: W)

case class Transition[S,W](from: State[S], label: Word[W], to: State[S])

case class DFA[S,W](states: Set[State[S]], alphabet: Set[Word[W]], start: State[S], accepts: Set[State[S]], transitions: Set[Transition[S,W]])

object Solution {

def solve(_dfa: => DFA[String,String]): Stream[String] = {
lazy val dfa = _dfa
def collectFinished(_starts: Seq[(State[String],String)], _acc: Seq[String]) : Seq[String] = {
lazy val starts = _starts
def f1(acc: Seq[String], kv: (State[String],String)) : Seq[String] = {
kv match {
case (k,v) => {
dfa.accepts.contains(k) match {
case true => // we can return the string
acc :+ v
case false => //we cannot return the string
acc
}
}
}
}
starts.foldLeft(_acc)(f1)      
}

def leaveOnlyTransitionable(_starts: Seq[(State[String],String)]): Seq[(State[String],String)] = {
// get all accepted states from which no transition start
val ss = dfa.accepts.filterNot(s => dfa.transitions.exists(t => t.from == s))
// we do not want the pairs with a state in [ss]
_starts.filterNot(kv => ss.contains(kv._1))
}

def applyAvailableTransitions(_starts: Seq[(State[String],String)]): Seq[(State[String],String)] = {
def f1(acc: Seq[(State[String],String)], kv: (State[String],String)): Seq[(State[String],String)] = {
// get all transitions starting from k
val kTransitions = dfa.transitions.filter(t => t.from == kv._1)
// apply transition
val pacc = kTransitions.map(t => (t.to,kv._2 + t.label.word))
acc ++ pacc
}
_starts.foldLeft(List().view:(Seq[(State[String],String)]))(f1)
}

def solve1(_starts: Seq[(State[String],String)], _acc: Seq[String]): (Seq[(State[String],String)],Seq[String]) = {
lazy val starts = _starts
// we collect all the strings that are finished
val acc = collectFinished(starts,List().view)
// then we clean all the states that are accepted and that
// cannot run a transition from _starts
val starts0 = leaveOnlyTransitionable(starts)
// then we update [starts0] by applying the transitions
val starts1 = applyAvailableTransitions(starts0)
(starts1,acc)
}


def recsolve1(_starts: Seq[(State[String],String)], _acc: Seq[String]): Stream[String] = {
val (starts,acc) = solve1(_starts,_acc)
if (starts.isEmpty) {
acc.toStream
} else {acc.toStream #::: recsolve1(starts,acc.view)}
}

recsolve1(List((dfa.start,"")), List())

}
}
#+END_SRC

Finally, let's check that all tests pass:

#+BEGIN_SRC sh :results example output :dir /tmp/problem-164-scala/problem164scala
sbt test
#+END_SRC

#+RESULTS:
#+begin_example
[info] Loading global plugins from /home/andrea/.sbt/0.13/plugins
[info] Set current project to problem164scala (in build file:/tmp/problem-164-scala/problem164scala/)
[info] Updating {file:/tmp/problem-164-scala/problem164scala/}problem164scala...
[info] Resolving org.scala-lang#scala-library;2.10.6 ...
[info] Resolving org.scalactic#scalactic_2.10;3.0.1 ...
[info] Resolving org.scala-lang#scala-reflect;2.10.6 ...
[info] Resolving org.scalatest#scalatest_2.10;3.0.1 ...
[info] Resolving org.scala-lang#scala-compiler;2.10.6 ...
[info] Resolving org.scala-lang#jline;2.10.6 ...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Resolving org.scala-lang#scalap;2.10.6 ...
[info] Done updating.
[info] Compiling 1 Scala source to /tmp/problem-164-scala/problem164scala/target/scala-2.10/classes...
[info] Compiling 1 Scala source to /tmp/problem-164-scala/problem164scala/target/scala-2.10/test-classes...
[info] GivenTests:
[info] - produce stream {'a' 'ab' 'abc'} for the given DFA
[info] - produce a stream {'hi' 'hey' 'hello'} for the given DFA
[info] - produce stream created by list comprehension for the given DFA
[info] - produce stream 01 for the given DFA and test by property
[info] - produce stream nm for the given DFA and test by property
[info] - produce stream ilompt for the given DFA and test by property
[info] Run completed in 1 second, 761 milliseconds.
[info] Total number of tests run: 6
[info] Suites: completed 1, aborted 0
[info] Tests: succeeded 6, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[success] Total time: 6 s, completed 01-Feb-2017 00:38:49
#+end_example
